// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.
import { assert } from "../_util/assert.ts";
const DEFAULT_BUFFER_SIZE = 32 * 1024;
/** copy N size at the most.
 *  If read size is lesser than N, then returns nread
 * */ export async function copyN(r, dest, size) {
    let bytesRead = 0;
    let buf = new Uint8Array(DEFAULT_BUFFER_SIZE);
    while(bytesRead < size){
        if (size - bytesRead < DEFAULT_BUFFER_SIZE) {
            buf = new Uint8Array(size - bytesRead);
        }
        const result = await r.read(buf);
        const nread = result ?? 0;
        bytesRead += nread;
        if (nread > 0) {
            let n = 0;
            while(n < nread){
                n += await dest.write(buf.slice(n, nread));
            }
            assert(n === nread, "could not write");
        }
        if (result === null) {
            break;
        }
    }
    return bytesRead;
}
/** Read big endian 16bit short from BufReader */ export async function readShort(buf) {
    const high = await buf.readByte();
    if (high === null) return null;
    const low = await buf.readByte();
    if (low === null) throw new Deno.errors.UnexpectedEof();
    return high << 8 | low;
}
/** Read big endian 32bit integer from BufReader */ export async function readInt(buf) {
    const high = await readShort(buf);
    if (high === null) return null;
    const low = await readShort(buf);
    if (low === null) throw new Deno.errors.UnexpectedEof();
    return high << 16 | low;
}
const MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);
/** Read big endian 64bit long from BufReader */ export async function readLong(buf) {
    const high = await readInt(buf);
    if (high === null) return null;
    const low = await readInt(buf);
    if (low === null) throw new Deno.errors.UnexpectedEof();
    const big = BigInt(high) << 32n | BigInt(low);
    // We probably should provide a similar API that returns BigInt values.
    if (big > MAX_SAFE_INTEGER) {
        throw new RangeError("Long value too big to be represented as a JavaScript number.");
    }
    return Number(big);
}
/** Slice number into 64bit big endian byte array */ export function sliceLongToBytes(d, dest = new Array(8)) {
    let big = BigInt(d);
    for(let i = 0; i < 8; i++){
        dest[7 - i] = Number(big & 0xffn);
        big >>= 8n;
    }
    return dest;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjc1LjAvaW8vaW91dGlsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjAgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5pbXBvcnQgdHlwZSB7IEJ1ZlJlYWRlciB9IGZyb20gXCIuL2J1ZmlvLnRzXCI7XG50eXBlIFJlYWRlciA9IERlbm8uUmVhZGVyO1xudHlwZSBXcml0ZXIgPSBEZW5vLldyaXRlcjtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuLi9fdXRpbC9hc3NlcnQudHNcIjtcblxuY29uc3QgREVGQVVMVF9CVUZGRVJfU0laRSA9IDMyICogMTAyNDtcblxuLyoqIGNvcHkgTiBzaXplIGF0IHRoZSBtb3N0LlxuICogIElmIHJlYWQgc2l6ZSBpcyBsZXNzZXIgdGhhbiBOLCB0aGVuIHJldHVybnMgbnJlYWRcbiAqICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weU4oXG4gIHI6IFJlYWRlcixcbiAgZGVzdDogV3JpdGVyLFxuICBzaXplOiBudW1iZXIsXG4pOiBQcm9taXNlPG51bWJlcj4ge1xuICBsZXQgYnl0ZXNSZWFkID0gMDtcbiAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KERFRkFVTFRfQlVGRkVSX1NJWkUpO1xuICB3aGlsZSAoYnl0ZXNSZWFkIDwgc2l6ZSkge1xuICAgIGlmIChzaXplIC0gYnl0ZXNSZWFkIDwgREVGQVVMVF9CVUZGRVJfU0laRSkge1xuICAgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAtIGJ5dGVzUmVhZCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHIucmVhZChidWYpO1xuICAgIGNvbnN0IG5yZWFkID0gcmVzdWx0ID8/IDA7XG4gICAgYnl0ZXNSZWFkICs9IG5yZWFkO1xuICAgIGlmIChucmVhZCA+IDApIHtcbiAgICAgIGxldCBuID0gMDtcbiAgICAgIHdoaWxlIChuIDwgbnJlYWQpIHtcbiAgICAgICAgbiArPSBhd2FpdCBkZXN0LndyaXRlKGJ1Zi5zbGljZShuLCBucmVhZCkpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KG4gPT09IG5yZWFkLCBcImNvdWxkIG5vdCB3cml0ZVwiKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlc1JlYWQ7XG59XG5cbi8qKiBSZWFkIGJpZyBlbmRpYW4gMTZiaXQgc2hvcnQgZnJvbSBCdWZSZWFkZXIgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkU2hvcnQoYnVmOiBCdWZSZWFkZXIpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcbiAgY29uc3QgaGlnaCA9IGF3YWl0IGJ1Zi5yZWFkQnl0ZSgpO1xuICBpZiAoaGlnaCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGxvdyA9IGF3YWl0IGJ1Zi5yZWFkQnl0ZSgpO1xuICBpZiAobG93ID09PSBudWxsKSB0aHJvdyBuZXcgRGVuby5lcnJvcnMuVW5leHBlY3RlZEVvZigpO1xuICByZXR1cm4gKGhpZ2ggPDwgOCkgfCBsb3c7XG59XG5cbi8qKiBSZWFkIGJpZyBlbmRpYW4gMzJiaXQgaW50ZWdlciBmcm9tIEJ1ZlJlYWRlciAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRJbnQoYnVmOiBCdWZSZWFkZXIpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcbiAgY29uc3QgaGlnaCA9IGF3YWl0IHJlYWRTaG9ydChidWYpO1xuICBpZiAoaGlnaCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGxvdyA9IGF3YWl0IHJlYWRTaG9ydChidWYpO1xuICBpZiAobG93ID09PSBudWxsKSB0aHJvdyBuZXcgRGVuby5lcnJvcnMuVW5leHBlY3RlZEVvZigpO1xuICByZXR1cm4gKGhpZ2ggPDwgMTYpIHwgbG93O1xufVxuXG5jb25zdCBNQVhfU0FGRV9JTlRFR0VSID0gQmlnSW50KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcblxuLyoqIFJlYWQgYmlnIGVuZGlhbiA2NGJpdCBsb25nIGZyb20gQnVmUmVhZGVyICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZExvbmcoYnVmOiBCdWZSZWFkZXIpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcbiAgY29uc3QgaGlnaCA9IGF3YWl0IHJlYWRJbnQoYnVmKTtcbiAgaWYgKGhpZ2ggPT09IG51bGwpIHJldHVybiBudWxsO1xuICBjb25zdCBsb3cgPSBhd2FpdCByZWFkSW50KGJ1Zik7XG4gIGlmIChsb3cgPT09IG51bGwpIHRocm93IG5ldyBEZW5vLmVycm9ycy5VbmV4cGVjdGVkRW9mKCk7XG4gIGNvbnN0IGJpZyA9IChCaWdJbnQoaGlnaCkgPDwgMzJuKSB8IEJpZ0ludChsb3cpO1xuICAvLyBXZSBwcm9iYWJseSBzaG91bGQgcHJvdmlkZSBhIHNpbWlsYXIgQVBJIHRoYXQgcmV0dXJucyBCaWdJbnQgdmFsdWVzLlxuICBpZiAoYmlnID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgXCJMb25nIHZhbHVlIHRvbyBiaWcgdG8gYmUgcmVwcmVzZW50ZWQgYXMgYSBKYXZhU2NyaXB0IG51bWJlci5cIixcbiAgICApO1xuICB9XG4gIHJldHVybiBOdW1iZXIoYmlnKTtcbn1cblxuLyoqIFNsaWNlIG51bWJlciBpbnRvIDY0Yml0IGJpZyBlbmRpYW4gYnl0ZSBhcnJheSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlTG9uZ1RvQnl0ZXMoZDogbnVtYmVyLCBkZXN0ID0gbmV3IEFycmF5KDgpKTogbnVtYmVyW10ge1xuICBsZXQgYmlnID0gQmlnSW50KGQpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgIGRlc3RbNyAtIGldID0gTnVtYmVyKGJpZyAmIDB4ZmZuKTtcbiAgICBiaWcgPj49IDhuO1xuICB9XG4gIHJldHVybiBkZXN0O1xu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